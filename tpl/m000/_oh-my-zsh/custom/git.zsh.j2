{% if ["git",] is installed %}
# remove dangerous aliases of the git plugin
unalias grh 2>/dev/null
unalias grhh 2>/dev/null
unalias gru 2>/dev/null

# unalias stupid aliases of the git plugin
unalias g 2>/dev/null
unalias gp 2>/dev/null
unalias ghh 2>/dev/null

# Returns a short hash of the specified repo/commit.
ghash() {
    local repo
    local rev
    if (( $# == 0 )); then
        repo="."
        rev="HEAD"
    elif (( $# == 1 )); then
        repo="$1"
        rev="HEAD"
    else
        repo="$1"
        rev="$2"
    fi

    cd "$repo"
    git rev-parse --short --verify "$rev"
    cd ~-
}

# Does a fixup of the last n commits.
# Uses the message of the oldest commit for the resulting commit.
gfixup() {
    local n=$(($1))
    if (( n < 2 )); then
        printf "%s: nothing to do\n" "$0" >&2
        return
    fi

    local m=$(git log --format=%B HEAD~$((n))..HEAD~$((n-1)))
    git reset --soft HEAD~$((n))
    git commit -m $m
}

# Inspects modified files and prompts for staging.
# TODO: Implement using porcelain. https://www.stefanjudis.com/today-i-learned/the-short-version-of-git-status-and-the-close-but-different-porcelain-mode/
gstagei() {
    local d=${1:-}
    local stage_prompt=""
    local stage
    # Unstaged files have a leading space in their status line.
    for f in $(git status -s $d | awk '/^ +M/{print $2}'); do
        git diff $f;
        stage_prompt=$(printf "%q: stage this file? " "$f")
        read -q "stage?$stage_prompt"
        if [ $stage = "y" ]; then
            git add $f
        fi
        echo ""
    done
}
{% endif %}
# vim: ft=zsh expandtab ts=4 sts=4 sw=4 :
