{% if ["git",] is installed %}
# remove dangerous aliases of the git plugin
unalias grh 2>/dev/null
unalias grhh 2>/dev/null
unalias gru 2>/dev/null

# unalias stupid aliases of the git plugin
unalias g 2>/dev/null
unalias gp 2>/dev/null
unalias ghh 2>/dev/null

# Returns a short hash of the specified repo/commit.
ghash() {
    local repo
    local rev
    if (( $# == 0 )); then
        repo="."
        rev="HEAD"
    elif (( $# == 1 )); then
        repo="$1"
        rev="HEAD"
    else
        repo="$1"
        rev="$2"
    fi

    cd "$repo"
    git rev-parse --short --verify "$rev"
    cd ~-
}

# Does a fixup of the last n commits.
# Uses the message of the oldest commit for the resulting commit.
gfixup() {
    local n=$(($1))
    if (( n < 2 )); then
        printf "%s: nothing to do\n" "$0" >&2
        return
    fi

    local m=$(git log --format=%B HEAD~$((n))..HEAD~$((n-1)))
    git reset --soft HEAD~$((n))
    git commit -m $m
}

# Remove and cleanup a branch if merged with origin/master.
gbclean() {
    local -A opts=( -r origin -b master )
    local blocal blocalhead
    local remote bremote
    local mergebase
    local rmlocal rmremote

    zparseopts -D -E -K -A opts r: b:

    if (( $# < 1 )); then
        cat >&2 <<-EOF
		No branch specified. Usage:
		    $0 [-r REMOTE] [-b RBRANCH] LBRANCH

		Mandatory arguments:
		    LBRANCH       Local branch to delete.

		Optional arguments:
		    -r REMOTE     Use REMOTE repository instead of origin.
		    -b RBRANCH    Use RBRANCH branch on REMOTE instead of master.
		EOF
        return 1
    fi

    remote="$opts[-r]"
    bremote="$opts[-b]"
    rmlocal=0
    rmremote=0
    for blocal in $@; do
        blocalhead=$(git rev-parse --verify "$blocal" 2>/dev/null)
        if [ $? != 0 ]; then
            printf "Local branch %s does not exist.\n" "$blocal" >&2
            continue
        fi
        mergebase=$(git merge-base "$blocal" "$remote/$bremote")

        if [ "$mergebase" != "$blocalhead" ]; then
            printf "Merge base of %s and %s does not match the head of %s.\n" "$remote"/"$bremote" "$blocal" "$blocal" >&2
            continue
        fi

        if ! git ls-remote --exit-code --heads "$remote" "$blocal"; then
            printf "Remote branch %s/%s does not exist. Skipping removal.\n" "$remote" "$blocal" >&2
        else
            read -q "REPLY?Remove remote branch $remote/$blocal? "
            if echo "" && [ "$REPLY" = "y" ]; then
                git push "$remote" --delete "$blocal"
                ((rmremote++))
            fi
        fi

        if [ "$(git branch --show-current)" = "$blocal" ]; then
            printf "Skipping removal of current branch %s.\n" "$blocal" >&2
        else
            read -q "REPLY?Remove local branch $blocal? "
            if echo "" && [ "$REPLY" = "y" ]; then
                git branch -D "$blocal"
                ((rmlocal++))
            fi
        fi
    done

    git fetch -p
    printf "Removed %d local branches and %d remote branches.\n" "$rmlocal" "$rmremote"
}

# Inspects modified files and prompts for staging.
# TODO: Implement using porcelain. https://www.stefanjudis.com/today-i-learned/the-short-version-of-git-status-and-the-close-but-different-porcelain-mode/
gstagei() {
    local d=${1:-}
    local stage_prompt=""
    local stage
    # Unstaged files have a leading space in their status line.
    for f in $(git status -s $d | awk '/^ +M/{print $2}'); do
        git diff $f;
        stage_prompt=$(printf "%q: stage this file? " "$f")
        read -q "stage?$stage_prompt"
        if [ $stage = "y" ]; then
            git add $f
        fi
        echo ""
    done
}
{% endif %}
# vim: ft=zsh expandtab ts=4 sts=4 sw=4 :
