{#
# ------------
# zsh quickref
# ------------
#
# **** Variable expansion ****
# Variables containing spaces do not need to be quoted to avoid expansion
# to multiple arguments. When you do need to expand a variable to multiple
# arguments, use the '=' modifier. Do note however, that any other special
# characters that may be included in the string, still require quoting!
# Additionally, a pottentially empty string needs to be quoted.
# Example:
#     lsopts="-a -l"
#     ls $lsopts            # error!!!
#     ls ${=lsopts}         # runs 'ls -a -l'
#     printf "%s%d" $a 2    # prints '20'
#     printf "%s%d" "$a" 2  # prints '2'
#
# **** zparseopt flags ****
# -D:    Remove parsed options.
# -E:    Don't stop when no match.
# -K:    Keep any default values when no match.
# -a a:  Simple array with matched options. To test for a flag use the index
#        lookup modifiers ('I' or 'Ie') modifiers, and arithmetic evaluation.
#        Example:
#           if (($a[(Ie)--flag])); then
#               echo "flag specified"
#           fi
# -A A:  Associative array with matched options.
#
# **** zparseopt option specifiers ****
# name       Simple a flag.
# name+      Flag that allows multiple instances (e.g. to increase verbosity).
# name:      Option with mandatory argument. Two elements added to array.
# name:-     Option with mandatory argument. Added to array as one element.
# name+:     Same as name:, only allow multiple instances of the option.
# name+:-    Same as name:-, only allow multiple instances of the option.
#
# The options are added to the array specied with the -a flag.
# You can specify another array for some options by appending a '=altarray'
# at the end of the specifier.
#
#
# ---------------------
# ffmpeg filter_complex
# ---------------------
# filter_complex allows you to specify a filter graph. A filter graph consists of
# a series of connected filter chains. Finally, filter chains are simple series of
# filters. Filters can be annotated with labels that allow us to link the chains
# of the filter graph. The chain separator is ';'. The filter separator is ','.
# This is a simplified summary of what is described in detail here:
#     https://ffmpeg.org/ffmpeg-filters.html#Filtergraph-description
#
# Example 1:
#   -filter_complex 'scale=480:-1:flags=spline,hqdn3d,fps=10[x]; [x]palettegen'
# This is a dummy filter, showing the use of labels. The output of the last filter
# in the first chain is labeled [x] and is used as an input for the first filter of
# the second chain.
#
# Example 2:
#   -filter_complex 'scale=480:-1:flags=lanczos[x]; [x]hqdn3d,fps=10[y]; [y][1:v]paletteuse'
# Here, we have specified 3 chains. What is interesting is that the first filter of the 
# last chain requires 2 inputs. The first input [y] is one we defined. The second input
# [1:v] refers to the video stream of the second input file (not shown here).
#}
{% if ["gm",] is installed %}
# git plugin alias conflicts with graphicsmagick
unalias gm 2>/dev/null
{% endif %}

# quick batch image resize with graphicsmagick
{% if ["gm",] is installed %}
gmresize() {
    local q=${q:-"85"}
    local s=${s:-"1200"}
    local sm=$(echo "$s" | tr -dc ^)
    s=$(echo "$s" | sed -E 's/[^0-9]*([0-9]+).*/\1/')

    for f in "$@"; do
        # extract extension for file
        fbnm=$(basename "$f")
        fext="${fbnm##*.}"
        if [ "$fext" = "$fbnm" ]; then
            echo "Skipping '$f' (no extension)." 1>&2
            continue
        fi

        # resize and save to temp file, then overwrite original
        mv -f =(gm convert -resize ${s}x${s}${sm} -quality "$q" "$f" ${fext}:-) "$f"

        # check for failure and overwrite original
        if [ "$?" != "0" ]; then
            echo "Conversion failure for '$f' (conversion failure)." 1>&2
            continue
        fi

        gm identify "$f"
    done
}
{% else %}
# gmresize: not available in this setup
{% endif %}

# boomerang gifs using graphicsmagic and gifsicle
{% if ["gm",] is installed %}
gmboomerang() {
    local boomtemp=$(mktemp -t boomtmpXXX.gif)
    local lastframe=$(gm identify "$1" | tail -1 | awk -F'[\\[\\]]' '{ print $2 }')
    local forward_range="0-$lastframe"
    local reverse_range="$(( $lastframe -1 ))-1"
    {% if ["gifsicle",] is installed %}
    local frame_delay=${3:-default}
    {% else %}
    local frame_delay=${3:-10}
    {% endif %}

    if (( $# < 2 || $# > 3 )); then
        cat >&2 <<- EOF
			Usage: gmboomerang INPUT OUTPUT [DELAY]
			
			Mandatory arguments:
			  INPUT       Input gif.
			  OUTPUT      Output gif.
			
			Optional arguments:
			  DELAY       Delay between gif frames in 1/100ths of sec.
		EOF
        return 1
    fi

    {% if ["gifsicle",] is installed %}
    # get frame delay from source
    if [ $frame_delay = "default" ]; then
        # get delay in sec
        frame_delay=$(gifsicle -I "$1" | grep delay | grep -Eo '[.0-9]+' | 
            sort | uniq -c | sort -n | head -1 | awk '{print $2}')

        # convert to 1/100 of sec
        frame_delay=$(printf "%d" $((100 * $frame_delay)))
    fi
    {% endif %}

    gm convert "$1" -coalesce "$boomtemp"
    gm convert -delay "$frame_delay" -loop 0 "$boomtemp"'['"$forward_range"']' "$boomtemp"'['"$reverse_range"']' "$2"
    rm -f "$boomtemp"
    {% if ["gifsicle",] is installed %}
    gifsicle --batch -O3 "$2"
    {% else %}
    echo "Warning: gifsicle not found, output is not optimized." >&2
    {% endif -%}
}
{% else %}
# gmboomerang: not available in this setup
{% endif %}

# easy time range arguments for ffmpeg
{% if ["ffmpeg",] is installed %}
fftimeparse() {
    local mode=""
    local spec=""
    local specf=()

    # whole lotta re
    local re_msec='(\.[[:digit:]]{0,2})?'
    local re_sec='[[:digit:]]{1,2}'
    local re_xsec='[[:digit:]]{1,}'
    local re_mh='([[:digit:]]{0,2}:)?'

    local tfmt1=${re_xsec}${re_msec}
    local tfmt2=${re_mh}${re_mh}${re_sec}${re_msec}
    local tfmt='('$tfmt1'|'$tfmt2')'

    {# (s:<string>:) -> force field splitting at string #}
    # Match timespec 
    if [[ $1 =~ "^$tfmt\+$tfmt\$" ]]; then
        mode="delta"
        spec=( ${(s:+:)1} )
    elif [[ $1 =~ "^$tfmt\-$tfmt\$" ]]; then
        mode="range"
        spec=( ${(s:-:)1} )
    fi

    if [ "$mode" = "" ] || (( {{ '${#spec}' }} != 2 )); then
        cat >&2 <<- EOF
			Usage: fftimeparse TIMESPEC
			Convert a simplified TIMESPEC to arguments suitable for specifying
			a time range to ffmpeg.
			
			Supports two TIMESPEC formats:
			    delta TIMESPEC     <start>+<delta>
			    range TIMESPEC     <start>-<end>

			The components of the formats may either be:
			    seconds based      <sec>.<msec>
			    h/min/sec based    <h>:<min>:<sec>.<msec>
		EOF
        return 1
    fi

    # convert specs to seconds for use with ffmpeg
    for i in {1..{{ '${#spec}' }}}; do
        local s=$spec[$i]
        if [[ $s =~ "^$tfmt1\$" ]]; then
            # just convert sec to numeric value
            specf[$i]=$(( $s ))
        elif [[ $s =~ "^$tfmt2\$" ]]; then
            # convert components to sec and sum
            local ssum=0
            local scomponents=( ${(s.:.)s} )
            for j in {1..{{ '${#scomponents}' }}}; do
                local factor=$(( 60**({{ '${#scomponents}' }} - $j) ))
                ssum=$(( $ssum + $scomponents[$j] * $factor ))
            done
            specf[$i]=$ssum
        else
            # this should never happen
            $specf[$i]="XXX"
        fi
    done
        
    if [ "$mode" = "delta" ]; then
        printf -- "-ss %.02f -t %.02f\n" ${specf[1]} ${specf[2]}
        return 0
    elif [ "$mode" = "range" ]; then
        printf -- "-ss %.02f -t %.02f\n" ${specf[1]} $(( ${specf[2]} - ${specf[1]} ))
        return 0
    fi

    return 1
}
{% else %}
# fftimeparse: not available in this setup
{% endif %}

# crop detection using ffmpeg
{% if ["ffplay",] is installed %}
ffcropdetect() {
    local timespec=""
    local cropdetect=(-cropdetect 24:2:12)
    local opts=()
    local cropdetecttmp=$(mktemp -t cropdetecttmpXXX.txt)

    zparseopts -D -E -K -a opts -test t:=timespec cropdetect:=cropdetect 
    if [[ $# > 1 || -z "${timespec[(r)-t]}" ]]; then
        cat >&2 <<- EOF
			Usage: ffcropdetect [-cropdetect CDARGS] -t TIMESPEC [--test] [--audio] INPUT
			Auto-detect how INPUT should be cropped to remove surrounding empty space.
			
			An ffmpeg video filter argument that can be used to apply that crop will be
			printed at the end of the detection. E.g. for a 640x480 video with 20px/40px
			margins, crop=600:400:20:40 will be printed.
			
			Mandatory arguments:
			  TIMESPEC  Time specification, suitable for fftimeparse.
			  INPUT     File to process.
			
			Flags:
			  --test    Make a test play using the detected crop before exit.
			  --audio   Playback audio during detection and testing.
			
			Optional arguments:
			  CDARGS    Arguments for the ffmpeg cropdetect filter as a B:R:F triplet.
			            B: black threshold, R: crop rounding, F: frames per output line
			
		EOF
        return 1
    fi

    # parse timespec and use ffplay in cropdetect mode
    {# parameter strings need to be split with the (z) expansion flag #}
    local fftimespec=$(fftimeparse $timespec[2])
    local ffcropdetect="-vf cropdetect=$cropdetect[2]"
    local ffaudio="-an"
    if (($opts[(Ie)--audio])); then
        ffaudio=""
    fi
    ffplay ${(z)fftimespec} -autoexit -i "$1" $ffaudio ${(z)ffcropdetect} 1>/dev/null 2>"$cropdetecttmp"

    # choose the most popular crop flags
    local cropflags=$(grep -o 'crop=.*$' "$cropdetecttmp" |
        sort | uniq -c | sort -n | tail -1 | awk '{print $2}')

    # print/test and return
    rm -f "$cropdetecttmp"
    printf "%s\n" "$cropflags"
    {# (Ie): exact match, (I): pattern match #}
    if (($opts[(Ie)--test])); then
        echo "Test play..." >&2
        ffplay -autoexit -i "$1" $ffaudio -vf $cropflags 1>/dev/null 2>/dev/null
    fi
    return 0
}
{% else %}
# ffcropdetect: not available in this setup
{% endif %}

# animated gif creation using ffmpeg
# Roughly based on: http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html
{% if ["ffmpeg",] is installed %}
ffmakegif() {
    local timespec=""
    local crop=""
    local cropdetect=""
    local fps=(-fps 10)
    local frame_delay=(-delay default)
    local scale=(-scale 320:-1)
    local denoise=(-denoise none)
    local opts=()
    local gifpalettetmp=$(mktemp -t gifpalettetmpXXX.txt)

    local zparsespec="t:=timespec fps:=fps scale:=scale crop:=crop cropdetect:=cropdetect denoise:=denoise"
{% if ["gifsicle",] is installed %}
    zparsespec="$zparsespec delay:=frame_delay"
{% endif %}
    zparseopts -D -E -K -a opts ${=zparsespec}
    {#
    echo "source: $1"
    echo "destination: $2"
    echo "timespec: $timespec"
    echo "fps: $fps"
    echo "delay: $frame_delay"
    echo "denoise: $denoise"
    echo "scale: $scale"
    echo "crop: $crop"
    echo "cropdetect: $cropdetect"
    echo ""
    #}
    {# help text needs leading tab spaces - find or make a jinja2 filter to handle this #}
    if [[ $# != 2 || -z "${timespec[(r)-t]}" ]]; then
        cat >&2 <<- EOF
			Usage: ffmakegif [...] -t TIMESPEC INPUT OUTPUT
			
			Mandatory arguments:
			  TIMESPEC    Time specification, suitable for fftimeparse.
			  INPUT       File to process.
			  OUTPUT      File to write the gif output.
			
			Optional arguments:
			  -fps FPS              Frames per second in the output gif.
{% if ["gifsicle",] is installed %}
			  -delay DELAY          Delay between gif frames in 1/100 of sec. By default
			                        ffmpeg inferes the delay from the fps value, so that
			                        playback speed is preserved. Manually specifying the
			                        delay can be used to make gifs run faster/slower.
{% endif %}
			  -scale SCALE          Arguments for the ffmpeg scaler (scale=...).
			  -cropdetect CDARGS    Enable automatic crop detection on the source.
			                        Use "default" to use default autocropping arguments.
			                        Use "none" to skip autocropping.
			                        Or manually set CDARGS as described in ffcropdetect.
			  -crop VFCROP          Manually arguments for the ffmpeg crop video filter.
			                        The format is: W:H:TOPLEFT_X:TOPLEFT_Y
			                        Automatic crop detection will be disabled.
			
		EOF
        return 1
    fi

    # Set the crop filter argument. Must end with ',' if not empty.
    if [ "$crop[2]" != "" ]; then
        cropvf="$crop=$crop[2],"
    elif [ "$cropdetect[2]" = "default" ]; then
        cropvf="$(ffcropdetect -t $timespec[2] $1),"
    elif [ "$cropdetect[2]" = "none" ]; then
        cropvf=""
    elif [ "$cropdetect[2]" != "default" ]; then
        cropvf="$(ffcropdetect -cropdetect "$cropdetect[2]" -t "$timespec[2]" $1),"
    else
        cropvf=""
    fi

    # Set the denoise filter arguments. Must end with ',' if not empty.
    if [ "$denoise[2]" = "default" ]; then
        denoisevf="hqdn3d,"
    elif [ "$denoise[2]" = "none" ]; then
        denoisevf=""
    else
        denoisevf="hqdn3d=$denoise[2],"
    fi

    # Set ffmpeg arguments.
    local fftimespec=$(fftimeparse "$timespec[2]")
    local ffpalettevf=$(printf "%sscale=%s:flags=spline,%sfps=%d[x]; [x]palettegen=stats_mode=diff" "$cropvf" "$scale[2]" "$denoisevf" "$fps[2]")
    local ffgifvf=$(printf "%sscale=%s:flags=spline[x]; [x]%sfps=%d[y]; [y][1:v]paletteuse=dither=sierra2:diff_mode=rectangle" "$cropvf" "$scale[2]" "$denoisevf" "$fps[2]")
    local palettetemp=$(mktemp -t palettetempXXX.png)

    # create palette
    ffmpeg ${=fftimespec} -i $1 -an -filter_complex "$ffpalettevf" -y $palettetemp

    # create gif
    ffmpeg ${=fftimespec} -i $1 -i $palettetemp -an -filter_complex "$ffgifvf" -y $2

{% if ["gifsicle",] is installed %}
    if [ "$frame_delay[2]" != "default" ]; then
        # override delay
        gifsicle --batch -O3 --delay "$frame_delay[2]" $2
    fi
{% endif %}

    # cleanup
    rm -f $palettetemp
}
{% else %}
# ffmakegif: not available in this setup
{% endif %}


# vim: ft=zsh expandtab ts=4 sts=4 sw=4 :

